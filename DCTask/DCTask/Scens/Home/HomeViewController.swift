//
//  HomeViewController.swift
//  DCTask
//
//  Created by Hamest Tadevosyan on 14/10/2020.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum SortType {
    case byDate
    case byName
}

protocol HomeDisplayLogic: class
{
    func displayFetchData(viewModel: Home.FetchData.ViewModel)
    func displayError(error: Error)
    func showLoading()
    func hideLoading()
}

class HomeViewController: UIViewController, HomeDisplayLogic
{
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    var displayedData: [Home.FetchData.ViewModel.DisplayedElement] = []
    
    @IBOutlet weak var tableView: UITableView!
    
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableView.register(UINib(nibName: "TableViewCellCard", bundle: nil), forCellReuseIdentifier: "TableViewCellCard")
        tableView.tableFooterView = UIView()
        doFetchData()
    }
    
    // MARK: Do FetchData
        
    func doFetchData()
    {
        let request = Home.FetchData.Request()
        interactor?.doFetchData(request: request)
    }
    
    func displayFetchData(viewModel: Home.FetchData.ViewModel)
    {
        displayedData = viewModel.fetchData
        tableView.reloadData()
    }
    
    @IBAction func sortByDate(_ sender: Any) {
        sortBy(sortType: .byDate)
    }
    
    @IBAction func sortByName(_ sender: Any) {
        sortBy(sortType: .byName)
    }
    
    func sortBy(sortType:SortType) {
        DispatchQueue.global(qos: .userInitiated).async {
            switch sortType {
            case .byDate:
                self.displayedData = self.displayedData.sorted(by: {$0.date! >  $1.date!})
            case .byName:
                self.displayedData = self.displayedData.sorted(by: {$0.title! < $1.title!})
            }
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
    
    func showLoading() {
        view.showLoader()
    }
    
    func hideLoading() {
        view.removeLoader()
    }
    
    func displayError(error: Error) {
        // display error message, like no internet, server error...
        // router?.routeToErrorAlert()
    }
}

extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedData.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let element = displayedData[indexPath.row]
        let cell = tableView.dequeueReusableCell(withIdentifier:"TableViewCellCard", for: indexPath) as! TableViewCellCard
        
        cell.title.text = element.title
        cell.subTitle.text = element.description
        cell.rightSubTitle.text = element.releaseDate
        
        if cell.icon?.image == nil  || (cell.iconUrl != element.thumbnail && element.thumbnail != nil) {
            let url = URL(string: element.thumbnail!)
            cell.icon.image = UIImage(named: "defalut")
            DispatchQueue.global(qos: .utility).async {
                let data = try? Data(contentsOf: url!)
                DispatchQueue.main.async {
                    cell.icon.image = UIImage(data: data!)
                    cell.icon.contentMode = UIView.ContentMode.scaleAspectFit
                    cell.iconUrl = element.title
                }
            }
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 1
    }
    
}
